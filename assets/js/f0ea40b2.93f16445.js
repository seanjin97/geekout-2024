"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[935],{7370:(t,e,s)=>{s.r(e),s.d(e,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=s(4848),n=s(8453);const i={sidebar_position:5},d="1.3. Create a New Todo Task v3",a={id:"basics/todo-list/create-a-todo-task-v3",title:"1.3. Create a New Todo Task v3",description:"What about persisting the data?",source:"@site/docs/basics/todo-list/create-a-todo-task-v3.md",sourceDirName:"basics/todo-list",slug:"/basics/todo-list/create-a-todo-task-v3",permalink:"/geekout-2024/docs/basics/todo-list/create-a-todo-task-v3",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basics/todo-list/create-a-todo-task-v3.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"1.3. Create a New Todo Task v2",permalink:"/geekout-2024/docs/basics/todo-list/create-a-todo-task-v2"},next:{title:"1.4. Update a Todo Task",permalink:"/geekout-2024/docs/basics/todo-list/update-a-todo-task"}},r={},c=[{value:"Designing the API:",id:"designing-the-api",level:2},{value:"Diving into the code:",id:"diving-into-the-code",level:2}];function l(t){const e={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"13-create-a-new-todo-task-v3",children:"1.3. Create a New Todo Task v3"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.em,{children:"What about persisting the data?"})}),"\n",(0,o.jsx)(e.h2,{id:"designing-the-api",children:"Designing the API:"}),"\n",(0,o.jsx)(e.p,{children:"It's quite useless that this endpoint doesn't persist the data la, are we really \"creating\" something when nothing is stored in our JSON file?"}),"\n",(0,o.jsx)(e.p,{children:"Let's revise the user story."}),"\n",(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:"Given"}),(0,o.jsx)(e.th,{children:"When"}),(0,o.jsx)(e.th,{children:"Then"})]})}),(0,o.jsx)(e.tbody,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"As a todo list user"}),(0,o.jsx)(e.td,{children:"I want to add a new todo task with just the task's title"}),(0,o.jsx)(e.td,{children:"I call this API with the todo task's name and the server should store it in a file and tell me that it's been created successfully or not"})]})})]}),"\n",(0,o.jsx)(e.h2,{id:"diving-into-the-code",children:"Diving into the code:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'app.post("/todos", (req, res) => {\n  // Logic to create a new todo item\n  const requestBody = req.body;\n\n  const newTodoItemTitle = requestBody.title;\n\n  // What if there\'s no title field given?\n  if (!newTodoItemTitle) {\n    res.status(400).json({ error: "no title bro" });\n  }\n  // Read our existing todos\n  const existingTodos = fs.readFileSync("todos.json", "utf-8");\n  const formattedExistingTodos = JSON.parse(existingTodos);\n  \n  // Create a new todo\n  const newTodoItem = {\n    id: randomInt(0, 99999),\n    title: newTodoItemTitle,\n    completed: false,\n  };\n\n  // Merge the new todo into the existing todos\n  const updatedListOfTodos = [...formattedExistingTodos, newTodoItem];\n\n  fs.writeFileSync("todos.json", JSON.stringify(updatedListOfTodos));\n\n  res.status(201).json(newTodoItem);\n});\n'})})]})}function h(t={}){const{wrapper:e}={...(0,n.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(l,{...t})}):l(t)}},8453:(t,e,s)=>{s.d(e,{R:()=>d,x:()=>a});var o=s(6540);const n={},i=o.createContext(n);function d(t){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:d(t.components),o.createElement(i.Provider,{value:e},t.children)}}}]);