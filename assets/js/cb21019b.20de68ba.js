"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[91],{3381:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var s=o(4848),n=o(8453);const i={sidebar_position:7},d="Todo List API",r={id:"basics/todo",title:"Todo List API",description:"In this section, we'll guide you through the process of creating CRUD (Create, Read, Update, Delete) endpoints for your Todo List API using Express. We'll define the necessary routes directly in the existing app.js file, explain the purpose of each endpoint, and highlight some best practices along the way.",source:"@site/docs/basics/todo.md",sourceDirName:"basics",slug:"/basics/todo",permalink:"/geekout-2024/docs/basics/todo",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basics/todo.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Hello, World!",permalink:"/geekout-2024/docs/basics/hello-world"}},a={},l=[{value:"Step 1: Define how a Todo List item should look like",id:"step-1-define-how-a-todo-list-item-should-look-like",level:2},{value:"Step 2: Define the CRUD Endpoints",id:"step-2-define-the-crud-endpoints",level:2},{value:"2.1. Get All Todo Items (GET /todos)",id:"21-get-all-todo-items-get-todos",level:3},{value:"2.2. Get a Specific Todo Item (GET /todos/)",id:"22-get-a-specific-todo-item-get-todos",level:3},{value:"2.3. Create a New Todo Item (POST /todos)",id:"23-create-a-new-todo-item-post-todos",level:3},{value:"2.4. Update a Todo Item (PUT /todos/)",id:"24-update-a-todo-item-put-todos",level:3},{value:"2.5. Delete a Todo Item (DELETE /todos/)",id:"25-delete-a-todo-item-delete-todos",level:3},{value:"Best Practices and Considerations",id:"best-practices-and-considerations",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"todo-list-api",children:"Todo List API"}),"\n",(0,s.jsxs)(t.p,{children:["In this section, we'll guide you through the process of creating CRUD (Create, Read, Update, Delete) endpoints for your Todo List API using Express. We'll define the necessary routes directly in the existing ",(0,s.jsx)(t.code,{children:"app.js"})," file, explain the purpose of each endpoint, and highlight some best practices along the way."]}),"\n",(0,s.jsx)(t.h2,{id:"step-1-define-how-a-todo-list-item-should-look-like",children:"Step 1: Define how a Todo List item should look like"}),"\n",(0,s.jsx)(t.p,{children:"When designing the JSON data structure for todo list items, it's important to consider the necessary information you want to store for each todo item."}),"\n",(0,s.jsx)(t.p,{children:"For a start,"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "id": 1,\n  "title": "Buy groceries",\n  "completed": false,\n\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Let's break down each field:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"id (number): A unique identifier for the todo item. It can be an auto-incrementing integer."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"title (string): A concise title or summary of the todo item."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"completed (boolean): Indicates whether the todo item has been completed or not. It can be true or false."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"step-2-define-the-crud-endpoints",children:"Step 2: Define the CRUD Endpoints"}),"\n",(0,s.jsx)(t.p,{children:"What you'll be creating:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"GET /todos"})," -"]}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"GET /todos/:id"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"POST /todos"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"PUT /todos/:id"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"DELETE /todos/:id"})}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"21-get-all-todo-items-get-todos",children:"2.1. Get All Todo Items (GET /todos)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"app.get('/todos', (req, res) => {\n  // Logic to retrieve all todo items\n  // ...\n  res.json(todos);\n});\n"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"GET /todos"})," endpoint is used to retrieve all todo items."]}),"\n",(0,s.jsx)(t.li,{children:"It responds with an array of all todo items in the response body."}),"\n"]}),"\n",(0,s.jsxs)(t.h3,{id:"22-get-a-specific-todo-item-get-todos",children:["2.2. Get a Specific Todo Item (GET /todos/",":id",")"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"app.get('/todos/:id', (req, res) => {\n  const todoId = req.params.id;\n  // Logic to retrieve a specific todo item by its ID\n  // ...\n  res.json(todo);\n});\n"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"GET /todos/:id"})," endpoint is used to retrieve a specific todo item by its ID."]}),"\n",(0,s.jsxs)(t.li,{children:["The todo ID is passed as a parameter in the URL (e.g., ",(0,s.jsx)(t.code,{children:"/todos/1"}),")."]}),"\n",(0,s.jsx)(t.li,{children:"It responds with the requested todo item in the response body."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"23-create-a-new-todo-item-post-todos",children:"2.3. Create a New Todo Item (POST /todos)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"app.post('/todos', (req, res) => {\n  // Logic to create a new todo item\n  // ...\n  res.status(201).json(newTodo);\n});\n"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"POST /todos"})," endpoint is used to create a new todo item."]}),"\n",(0,s.jsx)(t.li,{children:"It accepts the todo data in the request body and creates a new todo item based on that data."}),"\n",(0,s.jsx)(t.li,{children:"Upon successful creation, it responds with a status code of 201 (Created) and returns the newly created todo item in the response body."}),"\n"]}),"\n",(0,s.jsxs)(t.h3,{id:"24-update-a-todo-item-put-todos",children:["2.4. Update a Todo Item (PUT /todos/",":id",")"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"app.put('/todos/:id', (req, res) => {\n  const todoId = req.params.id;\n  // Logic to update a specific todo item by its ID\n  // ...\n  res.json(updatedTodo);\n});\n"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"PUT /todos/:id"})," endpoint is used to update a specific todo item by its ID."]}),"\n",(0,s.jsx)(t.li,{children:"The todo ID is passed as a parameter in the URL, and the updated todo data is sent in the request body."}),"\n",(0,s.jsx)(t.li,{children:"It responds with the updated todo item in the response body."}),"\n"]}),"\n",(0,s.jsxs)(t.h3,{id:"25-delete-a-todo-item-delete-todos",children:["2.5. Delete a Todo Item (DELETE /todos/",":id",")"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"app.delete('/todos/:id', (req, res) => {\n  const todoId = req.params.id;\n  // Logic to delete a specific todo item by its ID\n  // ...\n  res.sendStatus(204);\n});\n"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"DELETE /todos/:id"})," endpoint is used to delete a specific todo item by its ID."]}),"\n",(0,s.jsx)(t.li,{children:"The todo ID is passed as a parameter in the URL."}),"\n",(0,s.jsx)(t.li,{children:"Upon successful deletion, it responds with a status code of 204 (No Content) to indicate that the resource was successfully deleted."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"best-practices-and-considerations",children:"Best Practices and Considerations"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Use meaningful and descriptive names for your routes and endpoints to enhance readability and maintainability."}),"\n",(0,s.jsx)(t.li,{children:"Follow REST (Representational State Transfer) principles when designing your API endpoints. Use appropriate HTTP methods (GET, POST, PUT, DELETE) for different operations."}),"\n",(0,s.jsx)(t.li,{children:"Use appropriate HTTP status codes to indicate the success or failure of an operation. For example, use 201 for successful resource creation, 200 for successful retrieval, 204 for successful deletion, etc."}),"\n",(0,s.jsx)(t.li,{children:"Validate and sanitize user input to ensure data integrity and prevent security vulnerabilities."}),"\n",(0,s.jsx)(t.li,{children:"Handle errors gracefully and provide meaningful error responses to the client."}),"\n",(0,s.jsx)(t.li,{children:"Document your API endpoints, including the request and response formats, to make it easier for other developers to understand and use your API."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(t.p,{children:["In this section, you learned how to create CRUD endpoints for your Todo List API using Express. We defined routes for creating, retrieving, updating, and deleting todo items directly in the ",(0,s.jsx)(t.code,{children:"app.js"})," file, following REST principles and best practices."]}),"\n",(0,s.jsx)(t.p,{children:"With these CRUD endpoints in place, your Todo List API is now capable of performing basic operations on todo items. You can further enhance your API by adding more features, such as filtering, sorting, pagination, etc."})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>d,x:()=>r});var s=o(6540);const n={},i=s.createContext(n);function d(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);