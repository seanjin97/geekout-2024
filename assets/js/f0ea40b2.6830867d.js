"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4935],{7370:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var s=o(4848),n=o(8453);const i={sidebar_position:5},d="1.3. Create a New Todo Task v3",a={id:"basics/todo-list/create-a-todo-task-v3",title:"1.3. Create a New Todo Task v3",description:"What about persisting the data?",source:"@site/docs/basics/todo-list/create-a-todo-task-v3.md",sourceDirName:"basics/todo-list",slug:"/basics/todo-list/create-a-todo-task-v3",permalink:"/geekout-2024/docs/basics/todo-list/create-a-todo-task-v3",draft:!1,unlisted:!1,editUrl:"https://github.com/seanjin97/geekout-2024/tree/master/docs/docs/basics/todo-list/create-a-todo-task-v3.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"1.3. Create a New Todo Task v2",permalink:"/geekout-2024/docs/basics/todo-list/create-a-todo-task-v2"},next:{title:"1.4. Update a Todo Task",permalink:"/geekout-2024/docs/basics/todo-list/update-a-todo-task"}},r={},c=[{value:"Designing the API:",id:"designing-the-api",level:2},{value:"Diving into the code:",id:"diving-into-the-code",level:2}];function l(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"13-create-a-new-todo-task-v3",children:"1.3. Create a New Todo Task v3"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"What about persisting the data?"})}),"\n",(0,s.jsx)(t.h2,{id:"designing-the-api",children:"Designing the API:"}),"\n",(0,s.jsx)(t.p,{children:"It's quite useless that this endpoint doesn't persist the data la, are we really \"creating\" something when nothing is stored in our JSON file?"}),"\n",(0,s.jsx)(t.p,{children:"Let's revise the user story."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Given"}),(0,s.jsx)(t.th,{children:"When"}),(0,s.jsx)(t.th,{children:"Then"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"As a todo list user"}),(0,s.jsx)(t.td,{children:"I want to add a new todo task with just the task's description"}),(0,s.jsx)(t.td,{children:"I call this API with the todo task's name and the server should store it in a file and tell me that it's been created successfully or not"})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"diving-into-the-code",children:"Diving into the code:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'app.post("/todos", (req, res) => {\n  // Logic to create a new todo item\n  const requestBody = req.body;\n\n  const newTodoItemDescription = requestBody.description;\n\n  // What if there\'s no description field given?\n  if (!newTodoItemDescription) {\n    res.status(400).json({ error: "no description bro" });\n  }\n  // Read our existing todos\n  const existingTodos = fs.readFileSync("todos.json", "utf-8");\n  const formattedExistingTodos = JSON.parse(existingTodos);\n\n  // Create a new todo\n  const newTodoItem = {\n    id: randomInt(0, 999999999),\n    description: newTodoItemDescription,\n    completed: false,\n  };\n\n  // Merge the new todo into the existing todos\n  const updatedListOfTodos = [...formattedExistingTodos, newTodoItem];\n\n  fs.writeFileSync("todos.json", JSON.stringify(updatedListOfTodos));\n\n  res.status(201).json(newTodoItem);\n});\n'})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>d,x:()=>a});var s=o(6540);const n={},i=s.createContext(n);function d(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);